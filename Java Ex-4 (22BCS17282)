1.Develop Java programs using core concepts such as data structures, collections, 
and multithreading to manage and manipulate data. 


class Card {
    private String rank;
    private String suit;

    public Card(String rank, String suit) {
        this.rank = rank;
        this.suit = suit;
    }

    public String getRank() {
        return rank;
    }

    public String getSuit() {
        return suit;
    }

    @Override
    public String toString() {
        return rank + " of " + suit;
    }
}

public class CardCollection {

    private Collection<Card> cards;

    public CardCollection() {
        cards = new ArrayList<>();
        // Initialize deck of cards
        String[] ranks = {"2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King", "Ace"};
        String[] suits = {"Hearts", "Spades", "Diamonds", "Clubs"};

        // Add all cards to the collection
        for (String suit : suits) {
            for (String rank : ranks) {
                cards.add(new Card(rank, suit));
            }
        }
    }

    // Method to find cards by suit
    public List<Card> findCardsBySuit(String suit) {
        List<Card> result = new ArrayList<>();
        for (Card card : cards) {
            if (card.getSuit().equalsIgnoreCase(suit)) {
                result.add(card);
            }
        }
        return result;
    }

    public void displayCards() {
        for (Card card : cards) {
            System.out.println(card);
        }
    }

    public static void main(String[] args) {
        CardCollection cardCollection = new CardCollection();
        Scanner scanner = new Scanner(System.in);

        // Display all cards
        System.out.println("All Cards in the Deck:");
        cardCollection.displayCards();
        
        // Ask user to find cards by suit
        System.out.print("\nEnter a suit to search for (Hearts, Spades, Diamonds, Clubs): ");
        String suit = scanner.nextLine();

        List<Card> cardsBySuit = cardCollection.findCardsBySuit(suit);

        if (!cardsBySuit.isEmpty()) {
            System.out.println("\nCards with the suit " + suit + ":");
            for (Card card : cardsBySuit) {
                System.out.println(card);
            }
        } else {
            System.out.println("\nNo cards found with the suit " + suit + ".");
        }
        
        scanner.close();
    }
}



2.  Write a Java program to implement an ArrayList that stores employee 
details (ID, Name, and Salary). Allow users to add, update, remove, and search 
employees.


import java.util.ArrayList;
import java.util.Scanner;

class Employee {
    private int id;
    private String name;
    private double salary;

    public Employee(int id, String name, double salary) {
        this.id = id;
        this.name = name;
        this.salary = salary;
    }

    // Getters and setters
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getSalary() {
        return salary;
    }

    public void setSalary(double salary) {
        this.salary = salary;
    }

    @Override
    public String toString() {
        return "Employee ID: " + id + ", Name: " + name + ", Salary: $" + salary;
    }
}

public class EmployeeManagementSystem {
    private ArrayList<Employee> employees;

    public EmployeeManagementSystem() {
        employees = new ArrayList<>();
    }

    // Add a new employee
    public void addEmployee(int id, String name, double salary) {
        employees.add(new Employee(id, name, salary));
        System.out.println("Employee added successfully.");
    }

    // Update an existing employee
    public void updateEmployee(int id, String name, double salary) {
        for (Employee employee : employees) {
            if (employee.getId() == id) {
                employee.setName(name);
                employee.setSalary(salary);
                System.out.println("Employee updated successfully.");
                return;
            }
        }
        System.out.println("Employee not found.");
    }

    // Remove an employee
    public void removeEmployee(int id) {
        Employee toRemove = null;
        for (Employee employee : employees) {
            if (employee.getId() == id) {
                toRemove = employee;
                break;
            }
        }
        if (toRemove != null) {
            employees.remove(toRemove);
            System.out.println("Employee removed successfully.");
        } else {
            System.out.println("Employee not found.");
        }
    }

    // Search for an employee by ID
    public void searchEmployee(int id) {
        for (Employee employee : employees) {
            if (employee.getId() == id) {
                System.out.println("Employee found: " + employee);
                return;
            }
        }
        System.out.println("Employee not found.");
    }

    // Display all employees
    public void displayAllEmployees() {
        if (employees.isEmpty()) {
            System.out.println("No employees found.");
        } else {
            System.out.println("List of employees:");
            for (Employee employee : employees) {
                System.out.println(employee);
            }
        }
    }

    public static void main(String[] args) {
        EmployeeManagementSystem system = new EmployeeManagementSystem();
        Scanner scanner = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\nEmployee Management System");
            System.out.println("1. Add Employee");
            System.out.println("2. Update Employee");
            System.out.println("3. Remove Employee");
            System.out.println("4. Search Employee");
            System.out.println("5. Display All Employees");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();
            scanner.nextLine();  // Consume newline character

            switch (choice) {
                case 1: // Add Employee
                    System.out.print("Enter Employee ID: ");
                    int id = scanner.nextInt();
                    scanner.nextLine();  // Consume newline
                    System.out.print("Enter Employee Name: ");
                    String name = scanner.nextLine();
                    System.out.print("Enter Employee Salary: ");
                    double salary = scanner.nextDouble();
                    system.addEmployee(id, name, salary);
                    break;

                case 2: // Update Employee
                    System.out.print("Enter Employee ID to update: ");
                    int updateId = scanner.nextInt();
                    scanner.nextLine();  // Consume newline
                    System.out.print("Enter new Employee Name: ");
                    String newName = scanner.nextLine();
                    System.out.print("Enter new Employee Salary: ");
                    double newSalary = scanner.nextDouble();
                    system.updateEmployee(updateId, newName, newSalary);
                    break;

                case 3: // Remove Employee
                    System.out.print("Enter Employee ID to remove: ");
                    int removeId = scanner.nextInt();
                    system.removeEmployee(removeId);
                    break;

                case 4: // Search Employee
                    System.out.print("Enter Employee ID to search: ");
                    int searchId = scanner.nextInt();
                    system.searchEmployee(searchId);
                    break;

                case 5: // Display All Employees
                    system.displayAllEmployees();
                    break;

                case 6: // Exit
                    System.out.println("Exiting...");
                    break;

                default:
                    System.out.println("Invalid choice. Please try again.");
                    break;
            }
        } while (choice != 6);

        scanner.close();
    }
}
